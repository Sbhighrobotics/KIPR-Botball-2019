#include <kipr/botball.h>
int speed = 2000;
int leftMotor = 1;
int rightMotor = 0;
int highGrey= 2700;
int lowBlack = 3700;
int highWhite =900;
int lowBlue = 1100;



void follow();
void goTillBlack();
void followCamera();
void goForward(int time);
void reverseFollowCamera();
void followBlue();
void toBlueR();
void toBlueL();


int main()
{
    shut_down_in(60);
    camera_open();
    toBlueL();
    followBlue();
    /*
	enable_servos();
    //set_servo_position(0,1022);
    mav(leftMotor, 0);
    mav(rightMotor, 0);
    mav(leftMotor,speed);
    msleep(400);
    goForward(2300);
    goTillBlack();
    mav(rightMotor,speed);
    mav(leftMotor,0);
    msleep(1400);
    follow();
    reverseFollowCamera();
    */
    


  /*
    followBlue();
    mav(1,2000);
    mav(0,0);
    msleep(1000);
    goForward(3000);
    */
    return 0;
}




void goForward(int t)
{
    mav(leftMotor, speed);
    mav(rightMotor, (speed));
    msleep(t);
}


void goTillBlack()
{
    while(analog(0)<lowBlack)
    {
    }
    mav(rightMotor,0);
    mav(leftMotor,0);
}



void follow()
{
    //double startTime = seconds();
    //printf("%f\n", startTime);
    int r = 0;
    int count=0;
    while(count < 55)// && r<14)
    {
        printf("%d\n",count);
        if(analog(0)<=highGrey)
        {
            mav(rightMotor,speed/2);
            mav(leftMotor,speed);
            msleep(2);

            //printf("on grey");
        }else if(analog(0)>=lowBlack)
        {
            mav(leftMotor,speed/2);
            mav(rightMotor,speed);
            msleep(2);

            //printf("on black");
        }else
        {
            mav(rightMotor,speed);
            mav(leftMotor,speed);
            msleep(100);
            //mav(rightMotor,0);
            //mav(leftMotor,0);
        }
        camera_update();

        if (get_object_count(0) != 0 && get_object_count(1) != 0 && (get_object_center_x(1,0) - get_object_center_x(0,0)) < 15) 
        {
            r = get_object_bbox_width(1,0);
            printf("%d\n", r);
        }

        count++;
    }
    mav(rightMotor,0);
    mav(leftMotor,0);
    // printf("%f\n", seconds() - startTime);
}


void followCamera()
{

    int width = get_object_bbox_width(0,0);
    int x=0; 
    while(width<25)
    {
        camera_update();
        if(get_object_count(0) != 0)
        {
            width = get_object_bbox_width(0,0);
            x= get_object_center_x(0,0);
            printf("%d\n",x);
            if(x<35)
            {
                mav(rightMotor, speed);
                mav(leftMotor, speed/2);
                msleep(50);
            }else if(x>=35 )
            {
                mav(leftMotor, speed);
                mav(rightMotor, speed/2);
                msleep(50);
            }
        }
    }
}

void reverseFollowCamera()
{
    int a = 0;
    while(a==0)
    {
        printf("I might be working");
        camera_update();
        if(get_object_count(0) != 0 && get_object_count(1) != 0)
        {
            printf("I see it");
            int x = (get_object_center_x(0,0)+get_object_center_x(1,0))/2;
            printf("%d\n",x);
            if(x > 140 && x <= 160)
            {
                printf("I'm going forward differently");
                mav(1, 1000);
                msleep(150);
                goForward(2600);
                toBlueL();
                break;
            }else
            {
                printf("I'm turning");
                mav(1, 1000);
                msleep(600);
                goForward(2550);
                toBlueR();
                break;
            }
        }else
        {
            printf("Why did I do this");
            mav(1, 1000);
            msleep(150);
            goForward(2600);
            toBlueL();
            break;
        }
    }
}    

void followBlue()
{
    int count=0;
    while(count<40)
    {
        if(analog(0)>=lowBlue)
        {
            mav(rightMotor,speed/2);
            mav(leftMotor,speed);
            msleep(2);
        }else if(analog(0)<=highWhite)
        {
            mav(leftMotor,speed/2);
            mav(rightMotor,speed);
            msleep(2);
        }else
        {
            mav(rightMotor,speed);
            mav(leftMotor,speed);
            msleep(100);
        }
        camera_update();
        count++;
    }
    mav(0,0);
    mav(1,0);
}

void toBlueR()
{
    mav(0,-2000);
    mav(1,-2000);
    msleep(1000);
    
}

void toBlueL()
{
    mav(rightMotor,-2000);
    mav(leftMotor,-2000);
    msleep(1000);
    mav(leftMotor,2000);
    mav(rightMotor,0);
    msleep(1700);
    mav(leftMotor, 2000);
    mav(rightMotor, 2000);
    msleep(500);
}










